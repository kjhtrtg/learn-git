练习git添加文件
git status
git add 文件，添加文件到暂存区，git add --a提交说有的文件
git commit  -m 注释 注释加双引号“”

git status 查看当前文件状态，是否有更改
git diff 对比当前和更改的地方，
git log 查看打印的提交记录
输入q退出记录能继续敲代码
git log --pretty=oneline 将记录在一行显示，显示提交的SHA1的算法的版本号和提交注释

HEAD表示的是当前的版本，HEAD^表示上一个版本，HEAD^^表示上2次HEAD~100表示上100次
git reset退回版本
git reset --hard HEAD^  表示退回上一个版本
git reset --hard sad321543(版本的id )  退回到指定的版本，如果上面退回操作错了，还可以退回到使用git reset会退到的被删除的版本，（操作错了，可以退回去到新的版本）
因为git reset只是把指针变了，把工作区内容更新到当前的版本，所以非常快

git reflog 当后悔的时候可以使用，git reflog当后悔的时候可以用这个查看所有的记录，被回退的也能看到，可以获得id来后悔

第一次修改 -> git add -> 第二次修改 -> git commit
你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，
所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

命令git checkout -- readme.txt（注意-- 文件中间有空格）意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

还记得如何丢弃工作区的修改吗？$ git checkout -- readme.txt

又到了小结时间。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

“md xx”创建一个baidu文件夹下的xx文件夹
想创建一个cc.txt的文件，只需输入“cd.>cc.txt”，按回车键，cd.表示为当前目录

git clone
1.将本地仓库初始化，命令：git init。
2.并克隆远程仓库项目地址url,命令:git clone url.如下图
3.git remote add origin git@github.com:michaelliao/learngit.git
4.git push -u origin master(首次提交）
在使用git 对源代码进行push到gitHub时可能会出错，信息如下
现错误的主要原因是github中的README.md文件不在本地代码目录中(error: failed to push some refs to 'git@github.com:yangchao0718/cocos2d.git)
可以通过如下命令进行代码合并【注：pull=fetch+merge]
git pull --rebase origin master
此时再执行语句 git push -u origin master即可完成代码上传到github

fatal: remote origin already exists.
解决办法如下：
1、先输入$ git remote rm origin
2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！
3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容
4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

HEAD指向的就是当前分支
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，
指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上

我们创建dev分支，然后切换到dev分支：
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

git branch命令查看当前分支

分支的工作完成，我们就可以切换回master分支：
$ git checkout master（分知名）用来切换分支
我们把dev分支的工作成果合并到master分支上：
git merge dev（dev合并到当前分支）

合并完成后，就可以放心地删除dev分支了
git branch -d dev

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。（带有详细信息的）

用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit（不带详细信息的）
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 & simple
|/
* fec145a branch test
...

git log -p -2
-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新

--stat，仅显示简要的增改行数统计：
$ git log --stat

--pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史
short，full 和fuller 可以用
git log --pretty=oneline

--abbrev-commit 仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。

format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析
 git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 11 months ago : changed the version number
085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明
_作者（author）_和_提交者（committer）_之间究竟有何差别，
其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人

Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。
另外还有按照时间作限制的选项，比如 --since 和 --until。
下面的命令列出所有最近两周内的提交
git log --since=2.weeks

--author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。
（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用--all-match 选项

-(n)	仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交。

2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），
可以用下面的查询命令：
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/

图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。
它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，
凡是git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后（前面不用加git），
就会启动图 gitk2-2 所示的界面。

上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异

Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
这样，从分支历史上就可以看出分支信息。
下面我们实战一下--no-ff方式的git merge：

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

git merge --no-ff -m "merge with no-ff" dev
查看记录 可以看到分支合并图 一条线上 显示SHA-1的前几个字符版本
git log --graph --pretty=oneline --abbrev-commit

git stash贮藏功能，更改到一半有生产等的bug的时候可以这样用
git status的时候工作区就没有改动了，因为已经贮藏了。可以切分支


