练习git添加文件
git status
git add 文件，添加文件到暂存区，git add --a提交说有的文件
git commit  -m 注释 注释加双引号“”

git status 查看当前文件状态，是否有更改
git diff 对比当前和更改的地方，
git log 查看打印的提交记录
输入q退出记录能继续敲代码
git log --pretty=oneline 将记录在一行显示，显示提交的SHA1的算法的版本号和提交注释

HEAD表示的是当前的版本，HEAD^表示上一个版本，HEAD^^表示上2次HEAD~100表示上100次
git reset退回版本
git reset --hard HEAD^  表示退回上一个版本
git reset --hard sad321543(版本的id )  退回到指定的版本，如果上面退回操作错了，还可以退回到使用git reset会退到的被删除的版本，（操作错了，可以退回去到新的版本）
因为git reset只是把指针变了，把工作区内容更新到当前的版本，所以非常快

git reflog 当后悔的时候可以使用，git reflog当后悔的时候可以用这个查看所有的记录，被回退的也能看到，可以获得id来后悔

第一次修改 -> git add -> 第二次修改 -> git commit
你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，
所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

命令git checkout -- readme.txt（注意-- 文件中间有空格）意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

还记得如何丢弃工作区的修改吗？$ git checkout -- readme.txt

又到了小结时间。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

“md xx”创建一个baidu文件夹下的xx文件夹
想创建一个cc.txt的文件，只需输入“cd.>cc.txt”，按回车键，cd.表示为当前目录
git clone
1.将本地仓库初始化，命令：git init。
2.并克隆远程仓库项目地址url,命令:git clone url.如下图
3.git remote add origin git@github.com:michaelliao/learngit.git
4.git push -u origin master(首次提交）
在使用git 对源代码进行push到gitHub时可能会出错，信息如下
现错误的主要原因是github中的README.md文件不在本地代码目录中(error: failed to push some refs to 'git@github.com:yangchao0718/cocos2d.git)
可以通过如下命令进行代码合并【注：pull=fetch+merge]
git pull --rebase origin master
此时再执行语句 git push -u origin master即可完成代码上传到github

fatal: remote origin already exists.
解决办法如下：
1、先输入$ git remote rm origin
2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！
3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容
4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

HEAD指向的就是当前分支
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，
指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上

我们创建dev分支，然后切换到dev分支：
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

git branch命令查看当前分支

分支的工作完成，我们就可以切换回master分支：
$ git checkout master（分知名）用来切换分支
我们把dev分支的工作成果合并到master分支上：
git merge dev（dev合并到当前分支）

合并完成后，就可以放心地删除dev分支了
git branch -d dev

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。（带有详细信息的）

用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit（不带详细信息的）
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 & simple
|/
* fec145a branch test
...

git log -p -2
-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新

--stat，仅显示简要的增改行数统计：
$ git log --stat

--pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史
short，full 和fuller 可以用
git log --pretty=oneline

--abbrev-commit 仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。

format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析
 git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 11 months ago : changed the version number
085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明
_作者（author）_和_提交者（committer）_之间究竟有何差别，
其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人

Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。
另外还有按照时间作限制的选项，比如 --since 和 --until。
下面的命令列出所有最近两周内的提交
git log --since=2.weeks

--author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。
（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用--all-match 选项

-(n)	仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交。

2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），
可以用下面的查询命令：
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/

图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。
它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，
凡是git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后（前面不用加git），
就会启动图 gitk2-2 所示的界面。

上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异

Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
这样，从分支历史上就可以看出分支信息。
下面我们实战一下--no-ff方式的git merge：

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

git merge --no-ff -m "merge with no-ff" dev
查看记录 可以看到分支合并图 一条线上 显示SHA-1的前几个字符版本
git log --graph --pretty=oneline --abbrev-commit

git stash贮藏功能，更改到一半有生产等的bug的时候可以这样用
git status的时候工作区就没有改动了，因为已经贮藏了。可以切分支

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：

再用git stash list查看
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}
后边{}数字是几就就是恢复到工作区哪个贮藏

关于git stash命令的使用方法网上一大把，我想记录的是我在使用过程中觉得实用及好用的：
当在一个分支的开发工作未完成，却又要切换到另外一个分支进行开发的时候，除了commit原分支的代码改动的方法外，我觉得git stash是一个更加便捷的选择。
步骤如下：
一、添加改动到stash。在原分支 git stash save -a "messeag"，网上很多很多资料都没有加 -a 这个option选项，我想他们的代码开发可能都是在原代码上进行修改吧。而对于在项目里加入了代码新文件的开发来说，-a选项才会将新加入的代码文件同时放入暂存区。
二、恢复改动。如果你要恢复的是最近的一次改动，git stash pop即可，我用这个用的最多。如果有多次stash操作，那就通过git stash list查看stash列表，从中选择你想要pop的stash，运行命令git stash pop stash@{id}或者 git stash apply stash@{id}即可。这方面网上的资料挺多的。
三、删除stash。git stash drop <stash@{id}>  如果不加stash编号，默认的就是删除最新的，也就是编号为0的那个，加编号就是删除指定编号的stash。git  stash clear 是清除所有stash,整个世界一下子清净了！
四、git stash pop  与 git stash apply <stash@{id}> 的区别。
原来git stash pop stash@{id}命令会在执行后将对应的stash id 从stash list里删除，
而 git stash apply stash@{id} 命令则会继续保存stash id。对于有点强迫症的我来说，
是容不下越来越多的陈旧stash id 仍然存在的，所以我更习惯于用git stash pop 命令


shortcut	相同的命令或者说明
git stash	git stash save
git stash apply	git stash apply stash@{0}
git stash drop	git stash drop stash@{0}
git stash pop	git stash apply 和 git stash drop
git stash list	查看stash列表
git stash list --stat	list可以加和git log一样的参数，stat表示显示改变
git stash show stash@{0}	显示一个stash内容
git stash show	git stash show stash@{0}
git stash show --patch	显示文件差异
git stash save "yin save"	给stash加上说明信息
git stash branch LittleBear stash@{0}	创建LittleBear分支，然后再stash pop
git stash save --keep-index	staging area not to be stashe

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
git branch -D dev（强行删除，git branch -d dev不能强行删除）
当提交后不同时才会提示，如果dev和master相同时候，可以-d删除

当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，
并且，远程仓库的默认名称是origin。

要查看远程库的信息，用git remote：
$ git remote
origin

用git remote -v显示更详细的信息：
$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，
要指定***本地分支***，这样，Git就会把该分支推送到远程库对应的远程分支上：

$ git push origin master
如果要推送其他分支，比如dev，就改成：

$ git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。


git tag查看所有tag标签
git tag <name>(v1.0)创建标签名字是v1.0

创建带说明的标签
git tag -a v1.0 -m "说明"
使用git show v1.0查看说明文字标签1.0的详细信息

git tag -s v2.0 -m "-s用私钥签名一个标签"
后补tag ,git tag v2.0 1111(GIT log提交的SHA-1);git
如果标签打错了，也可以删除：

$ git tag -d v0.1
Deleted tag 'v0.1' (was e078af9)
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
如果要推送某个标签到远程，使用命令git push origin <tagname>

或者，一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
$ git tag -d v0.9
Deleted tag 'v0.9' (was 6224937)
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9

在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码，需要作者同意才能成功

可以使用国内的Git托管服务——码云（gitee.com）用法与github基本一致

使用git remote rm origin
删除关联
git remote add origin（远程的名字可以自定义）git@gitee.com:xiangwenlong/learn-git.git
使用可能有readme.txt,
git pull --rebase gitee master
git pull git@gitree.com:xiangwenlong/learn-git.git
git push -u gitee master
可以建立多个联系
和上面一样步骤改下gitee的名字就可以
git remote add github git@github.com:kjhtrrg/learn-git.git
提交到哪个远程库就用那个的名字
git push gitee/github master

比如，让Git显示颜色，会让命令输出看起来更醒目：
$ git config --global color.ui true
建立忽略文件.gitignore
可以使用git check-ignore -v file忽略文件 可以检查忽略里面的错误
如果某个文件满足忽略规则又要强行加入可以，加入-f
比如git add -f file文件名

git的命令简化（取别名）
git config --global alias.st status
相当于git st就表示git status相同
--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

配置一个git last，让其显示最后一次提交信息：
$ git config --global alias.last 'log -1'
这样，用git last就能显示最近一次的提交：

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：

cat .git/config当前目录下Git配置
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，
把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，
所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。
如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限
有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，
每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），
所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。
当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响
当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，
会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动

当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，
会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。
这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。

git init newrepo
初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中

 git add *.c
$ git add README
$ git commit -m '初始化项目版本'
以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。

克隆仓库的命令格式为：
*repo:Git 仓库。
*directory:本地目录
git clone <repo>
如果我们需要克隆到指定的目录，可以使用以下命令格式：
git clone <repo> <directory>

HEAD
这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交

Index
index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit

Working Copy
working copy代表你正在工作的那个文件集

--mixed是reset的默认参数，也就是当你不指定任何参数时的参数。
它将重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，但是也到此为止。working copy不会被更改。

--hard参数将会blow out everything.它将重置HEAD返回到另外一个commit(取决于~12的参数），
重置index以便反映HEAD的变化，并且重置working copy也使得其完全匹配起来。

git status -s
AM README
A  hello.php
"AM" 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中
-s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容

执行 git diff 来查看执行 git status 的结果的详细信息
git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。
git diff 有两个主要的应用场景。
尚未缓存的改动：git diff（工作区）
查看已缓存的改动： git diff --cached（暂存区修改）
查看已缓存的与未缓存的所有改动：git diff HEAD
显示摘要而非整个 diff：git diff --stat（只显示更改文件行数）

git status 显示你上次提交更新后的更改或者写入缓存的改动（暂存区和工作区更改）

如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。
按下小写字母i，会进入编辑模式。可以在此模式下输入你想要的commit message。
输入结束以后，按下esc退出编辑模式，这时按下英文输入法下的冒号，再输入wq，就可以保存退出了。
w是write，q是quit。也可以在按esc退出编辑模式以后，切换到大写模式，连按两下Z。

git commit -m ""  只会提交添加到缓存区的文件（只提交添加的）
git commit -a -m ""  能提交修改过，但是没有添加到缓存区的文件（修改过的就能提交）

从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。
git rm <file>
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
git rm -f <file>

把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可
git rm --cached <file>

进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。
git rm –r *

git mv 命令用于移动或重命名一个文件、目录、软连接
git mv README(存在文件)  README.md（命名后文件）将read重命名为reame.md



